theme_bw()+
ggtitle("scatter plot: x as BT, y as eigen alignment ")
# eigen ~ tsb
ggplot(driver.eigen,
aes(x = tsb_tonne, y = eigen_alignment))+
geom_point()+
facet_wrap(vars(age))+
xlab("total stock biomass (tonne)")+
ylab("eigen_alignment")+
theme_bw()+
ggtitle("scatter plot: x as BT, y as eigen alignment ")
# eigen ~ ABI
ggplot(driver.eigen,
aes(x = ABImsy, y = eigen_alignment))+
geom_point()+
geom_smooth()+
facet_wrap(vars(age))+
xlab("ABImsy (Griffith2023)")+
ylab("eigen_alignment")+
theme_bw()+
ggtitle("scatter plot: x as ABI, y as eigen alignment ")
# eigen ~ ABI
s1 <- ggplot(driver.eigen,
aes(x = ABImsy, y = eigen_alignment))+
geom_point()+
geom_smooth()+
facet_wrap(vars(age))+
xlab("ABImsy (Griffith2023)")+
ylab("eigen_alignment")+
theme_bw()+
ggtitle("scatter plot: x as ABI, y as eigen alignment ")
# eigen ~ BT
s2 <- ggplot(driver.eigen,
aes(x = MeanBT, y = eigen_alignment))+
geom_point()+
geom_smooth()+
facet_wrap(vars(age))+
xlab("Mean bottom temperature North Sea")+
ylab("eigen_alignment")+
theme_bw()+
ggtitle("scatter plot: x as BT, y as eigen alignment ")
# eigen ~ tsb
s3 <- ggplot(driver.eigen,
aes(x = tsb_tonne, y = eigen_alignment))+
geom_point()+
geom_smooth()+
facet_wrap(vars(age))+
xlab("total stock biomass (tonne)")+
ylab("eigen_alignment")+
theme_bw()+
ggtitle("scatter plot: x as BT, y as eigen alignment ")
grid.arrange(s1, s2, s3, ncol=1) # output 6 x 8 vertical
driver.eigen
# eigen ~ ABI
s1 <- ggplot(driver.eigen,
aes(x = ABImsy, y = eigen_alignment))+
geom_point()+
geom_smooth()+
facet_wrap(vars(age))+
xlab("ABImsy (Griffith2023)")+
ylab("eigen_alignment")+
theme_bw()
# eigen ~ BT
s2 <- ggplot(driver.eigen,
aes(x = MeanBT, y = eigen_alignment))+
geom_point()+
geom_smooth()+
facet_wrap(vars(age))+
xlab("Mean bottom temperature North Sea")+
ylab("eigen_alignment")+
theme_bw()
# eigen ~ tsb
s3 <- ggplot(driver.eigen,
aes(x = tsb_tonne, y = eigen_alignment))+
geom_point()+
geom_smooth()+
facet_wrap(vars(age))+
xlab("total stock biomass (tonne)")+
ylab("eigen_alignment")+
theme_bw()
grid.arrange(s1, s2, s3, ncol=1) # output 6 x 8 vertical
wd = ""/Users/hsiaohang.tao/Dropbox/a_Chang_MDR/Demo_R_Code_MDR_S-MAP/mc/""
setwd(paste0(wd, "data/raw_data/"))
wd = "/Users/hsiaohang.tao/Dropbox/a_Chang_MDR/Demo_R_Code_MDR_S-MAP/mc/"
setwd(paste0(wd, "data/raw_data/"))
amo = read.csv("amon.csv", header=F, sep="")
colnames(amo) = c("Year", paste0("M", 1:12))
year = as.character(amo$Year)
amo = data.frame(Year=year, apply(amo[, -1], 2, as.numeric))
amo
# compute mean AMO on quarter 1 (January & February)
amo$Q1 = apply(amo[,c(2,3)], 1, mean)
driver.eigen
amo
amo = read.csv("amon.csv", header=F, sep="")
colnames(amo) = c("Year", paste0("M", 1:12))
year = as.character(amo$Year)
amo = data.frame(Year=year, apply(amo[, -1], 2, as.numeric))
amo = read.csv("amon.us.data_2019.csv", header=F, sep="")
colnames(amo) = c("Year", paste0("M", 1:12))
year = as.character(amo$Year)
amo = data.frame(Year=year, apply(amo[, -1], 2, as.numeric))
wd = "/Users/hsiaohang.tao/Dropbox/a_Chang_MDR/Demo_R_Code_MDR_S-MAP/mc/"
setwd(paste0(wd, "data/raw_data/"))
amo = read.csv("amon.us.data_2019.csv", header=F, sep="")
colnames(amo) = c("Year", paste0("M", 1:12))
year = as.character(amo$Year)
amo = data.frame(Year=year, apply(amo[, -1], 2, as.numeric))
amo
wd = "/Users/hsiaohang.tao/Dropbox/a_Chang_MDR/Demo_R_Code_MDR_S-MAP/mc/"
setwd(paste0(wd, "data/raw_data/"))
amo = read.csv("amon.us.data_2019.csv", header=F, sep="")
amo
colnames(amo) = c("Year", paste0("M", 1:12))
year = as.character(amo$Year)
amo = data.frame(Year=year, apply(amo[, -1], 2, as.numeric))
# compute mean AMO on quarter 1 (January & February)
amo$Q1 = apply(amo[,c(2,3)], 1, mean)
# select amo within study period
amo = subset(amo, subset=Year%in%c(1977:2019))
amo = subset(amo, select=c(Year, Q1))
amo = read.csv("amon.us.data_2019.csv", header=F, sep="")
colnames(amo) = c("Year", paste0("M", 1:12))
year = as.character(amo$Year)
amo = data.frame(Year=year, apply(amo[, -1], 2, as.numeric))
# compute mean AMO on quarter 1 (January & February)
amo$Q1 = apply(amo[,c(2,3)], 1, mean)
# select amo within study period
amo = subset(amo, subset=Year%in%c(1977:2019))
amo = subset(amo, select=c(Year, Q1))
amo
write.csv(amo, file=paste0(wd, "output\\amo_2019_formatted.csv"), row.names=FALSE)
write.csv(amo, file=paste0(wd, "/data/raw_data/amo_2019_formatted.csv"), row.names=FALSE)
write.csv(amo, file=paste0(wd, "/data/raw_data/amo_wang_formatted.csv"), row.names=FALSE)
# read amo
amo <- paste0(dr, sep = "/","data/raw_data/amo_wang_formatted.csv")
amo
# read amo
amo <- paste0(dr, sep = "/","data/raw_data/amo_wang_formatted.csv")
(amo <- read.csv(amo))
amo
# prepare amo column
amo.var <-amo %>%
dplyr::select(Year, Q1) %>%
rename('year' = 'Year',
'amo'= 'Q1' )
# create [driver.eigen] with inner_join with eigen.alignment
driver.eigen <- inner_join(eigen.alignment, abi.var, by = 'year')
driver.eigen <- inner_join(driver.eigen,bt.var, by = 'year')
driver.eigen <- inner_join(driver.eigen,tsb.var, by = 'year')
driver.eigen <- inner_join(driver.eigen,amo.var, by = 'year')
# create [driver.eigen.mat] by converting driver.eigen to wide form and matrix, in order to run ccm
driver.eigen.mat <- driver.eigen %>%
pivot_wider(names_from = age,
values_from = eigen_alignment) %>%
dplyr::select(! "year")
driver.eigen.mat
driver.eigen
driver.eigen
amo
driver.eigen
# create link to save ccm result for later
file.name.sig <- paste0(dr, sep = "/","output/6age_all_ns/driver_eigen_sig.csv")
file.name.rho <- paste0(dr, sep = "/","output/6age_all_ns/driver_eigen_rho.csv")
#1 make the data matrix as a list to fit the existing looped function
driver.eigen.mat
driver.eigen.mat.list <- list()
driver.eigen.mat.list[[1]] <- driver.eigen.mat
#2 run looped function ccm.fast.demo
Emax = 10
cri = 'rmse'
do.CCM <- T
ccm.sig <- list()
ccm.rho <- list()
for (i in 1:length(driver.eigen.mat.list)){
if(do.CCM){
ccm.out <- ccm.fast.demo.seq.1(driver.eigen.mat.list[[i]],
Epair=T,cri=cri,Emax=Emax)
ccm.sig[[i]] <- ccm.out[['ccm.sig']]
ccm.rho[[i]] <- ccm.out[['ccm.rho']]
if(SaveFile){
write.csv(ccm.sig, file =file.name.sig,row.names=F)
write.csv(ccm.rho,file = file.name.rho,row.names=F)
}
}
}
# results: abi effects on age 1-6 is column 1, bt effects is column 2, tsb effects is column 3
ccm.sig[[1]]
ccm.rho[[1]]
# results: abi effects on age 1-6 is column 1, bt effects is column 2, tsb effects is column 3
ccm.sig[[1]]
ccm.rho.tibble <- as.tibble(ccm.rho[[1]])
ccm.rho.tibble <- ccm.rho.tibble %>%
dplyr::select(c(V1, V2, V3, V4)) %>%
slice(4:n()) %>% # include rows of age
rename('ABImsy' = 'V1',
'MeanBT' = 'V2',
'tsb_tonne' = 'V3',
'amo' = 'V4') %>%
mutate(age = c(1,2,3,4,5,6)) %>%
mutate_at('age',as.character)
ccm.rho.tibble <- as.tibble(ccm.rho[[1]])
ccm.rho.tibble <- ccm.rho.tibble %>%
dplyr::select(c(V1, V2, V3, V4)) %>%
slice(5:n()) %>% # include rows of age
rename('ABImsy' = 'V1',
'MeanBT' = 'V2',
'tsb_tonne' = 'V3',
'amo' = 'V4') %>%
mutate(age = c(1,2,3,4,5,6)) %>%
mutate_at('age',as.character)
# driver as ABI
d1 <- ggplot(ccm.rho.tibble,
aes(x = age, y = ABImsy))+
geom_point(size = 3)+
xlab("age")+
ylab("rho from ccm")+
ggtitle("causal influence of ABI to eigen alignment ")+
theme_bw()
# driver as BT
d2 <- ggplot(ccm.rho.tibble,
aes(x = age, y = MeanBT))+
geom_point(size = 3)+
xlab("age")+
ylab("rho from ccm")+
ggtitle("causal influence of bottom temp to eigen alignment")+
theme_bw()
# driver as TSB
d3 <- ggplot(ccm.rho.tibble,
aes(x = age, y = tsb_tonne))+
geom_point(size = 3)+
xlab("age")+
ylab("rho from ccm")+
ggtitle("causal influence of total stock biomass to eigen alignment")+
theme_bw()
# driver as amo
d4 <- ggplot(ccm.rho.tibble,
aes(x = age, y = tsb_tonne))+
geom_point(size = 3)+
xlab("age")+
ylab("rho from ccm")+
ggtitle("causal influence of amo to eigen alignment")+
theme_bw()
grid.arrange(d1,d2,d3,d4, ncol=1) # output 6 x 8 vertical
# driver as ABI
d1 <- ggplot(ccm.rho.tibble,
aes(x = age, y = ABImsy))+
geom_point(size = 3)+
xlab("age")+
ylab("rho from ccm")+
ggtitle("causal influence of ABI to eigen alignment ")+
theme_bw()
# driver as BT
d2 <- ggplot(ccm.rho.tibble,
aes(x = age, y = MeanBT))+
geom_point(size = 3)+
xlab("age")+
ylab("rho from ccm")+
ggtitle("causal influence of bottom temp to eigen alignment")+
theme_bw()
# driver as TSB
d3 <- ggplot(ccm.rho.tibble,
aes(x = age, y = tsb_tonne))+
geom_point(size = 3)+
xlab("age")+
ylab("rho from ccm")+
ggtitle("causal influence of total stock biomass to eigen alignment")+
theme_bw()
# driver as amo
d4 <- ggplot(ccm.rho.tibble,
aes(x = age, y = tsb_tonne))+
geom_point(size = 3)+
xlab("age")+
ylab("rho from ccm")+
ggtitle("causal influence of amo to eigen alignment")+
theme_bw()
grid.arrange(d1,d2,d3,d4, ncol=1) # output 6 x 8 vertical
# driver as amo
d4 <- ggplot(ccm.rho.tibble,
aes(x = age, y = amo))+
geom_point(size = 3)+
xlab("age")+
ylab("rho from ccm")+
ggtitle("causal influence of amo to eigen alignment")+
theme_bw()
d4
ccm.rho[[1]]
ccm.rho[[1]]
# driver as ABI
d1 <- ggplot(ccm.rho.tibble,
aes(x = age, y = ABImsy))+
geom_point(size = 3)+
xlab("age")+
ylab("rho from ccm")+
ggtitle("causal influence of ABI to eigen alignment ")+
theme_bw()
# driver as BT
d2 <- ggplot(ccm.rho.tibble,
aes(x = age, y = MeanBT))+
geom_point(size = 3)+
xlab("age")+
ylab("rho from ccm")+
ggtitle("causal influence of bottom temp to eigen alignment")+
theme_bw()
# driver as TSB
d3 <- ggplot(ccm.rho.tibble,
aes(x = age, y = tsb_tonne))+
geom_point(size = 3)+
xlab("age")+
ylab("rho from ccm")+
ggtitle("causal influence of total stock biomass to eigen alignment")+
theme_bw()
# driver as amo
d4 <- ggplot(ccm.rho.tibble,
aes(x = age, y = amo))+
geom_point(size = 3)+
xlab("age")+
ylab("rho from ccm")+
ggtitle("causal influence of amo to eigen alignment")+
theme_bw()
grid.arrange(d1,d2,d3,d4, ncol=1) # output 6 x 8 vertical
# driver as ABI
d1 <- ggplot(ccm.rho.tibble,
aes(x = age, y = ABImsy))+
geom_point(size = 3)+
xlab("age")+
ylab("rho from ccm")+
ggtitle("causal influence of ABI to eigen alignment ")+
theme_bw()
# driver as BT
d2 <- ggplot(ccm.rho.tibble,
aes(x = age, y = MeanBT))+
geom_point(size = 3)+
xlab("age")+
ylab("rho from ccm")+
ggtitle("causal influence of bottom temp to eigen alignment")+
theme_bw()
# driver as TSB
d3 <- ggplot(ccm.rho.tibble,
aes(x = age, y = tsb_tonne))+
geom_point(size = 3)+
xlab("age")+
ylab("rho from ccm")+
ggtitle("causal influence of total stock biomass to eigen alignment")+
theme_bw()
# driver as amo
d4 <- ggplot(ccm.rho.tibble,
aes(x = age, y = amo))+
geom_point(size = 3)+
xlab("age")+
ylab("rho from ccm")+
ggtitle("causal influence of amo to eigen alignment")+
theme_bw()
grid.arrange(d1,d2,d3,d4, ncol=1) # output 6 x 8 vertical
# eigen ~ amo
s4 <- ggplot(driver.eigen,
aes(x = amo, y = eigen_alignment))+
geom_point()+
geom_smooth()+
facet_wrap(vars(age))+
xlab("AMO")+
ylab("eigen_alignment")+
theme_bw()
s4
driver.eigen
# eigen ~ ABI
s1 <- ggplot(driver.eigen,
aes(x = ABImsy, y = eigen_alignment))+
geom_point()+
geom_smooth()+
facet_wrap(vars(age))+
xlab("ABImsy (Griffith2023)")+
ylab("eigen_alignment")+
theme_bw()
# eigen ~ BT
s2 <- ggplot(driver.eigen,
aes(x = MeanBT, y = eigen_alignment))+
geom_point()+
geom_smooth()+
facet_wrap(vars(age))+
xlab("Mean bottom temperature North Sea")+
ylab("eigen_alignment")+
theme_bw()
# eigen ~ tsb
s3 <- ggplot(driver.eigen,
aes(x = tsb_tonne, y = eigen_alignment))+
geom_point()+
geom_smooth()+
facet_wrap(vars(age))+
xlab("total stock biomass (tonne)")+
ylab("eigen_alignment")+
theme_bw()
# eigen ~ amo
s4 <- ggplot(driver.eigen,
aes(x = amo, y = eigen_alignment))+
geom_point()+
geom_smooth()+
facet_wrap(vars(age))+
xlab("AMO")+
ylab("eigen_alignment")+
theme_bw()
grid.arrange(s1, s2, s3, s4, ncol=1) # output 6 x 8 vertical
# eigen ~ amo
s4 <- ggplot(driver.eigen,
aes(x = amo, y = eigen_alignment))+
geom_point()+
geom_smooth()+
facet_wrap(vars(age))+
xlab("AMO")+
ylab("eigen_alignment")+
theme_bw()+
heme(strip.text.x = element_text(margin = margin(.1, 0, .1, 0, "cm")))
# eigen ~ amo
s4 <- ggplot(driver.eigen,
aes(x = amo, y = eigen_alignment))+
geom_point()+
geom_smooth()+
facet_wrap(vars(age))+
xlab("AMO")+
ylab("eigen_alignment")+
theme_bw()+
theme(strip.text.x = element_text(margin = margin(.1, 0, .1, 0, "cm")))
s4
# eigen ~ amo
s4 <- ggplot(driver.eigen,
aes(x = amo, y = eigen_alignment))+
geom_point()+
geom_smooth()+
facet_wrap(vars(age))+
xlab("AMO")+
ylab("eigen_alignment")+
theme_bw()+
theme(strip.text.x = element_text(margin = margin(.5, 0, .1, 0, "cm")))
s4
# eigen ~ amo
s4 <- ggplot(driver.eigen,
aes(x = amo, y = eigen_alignment))+
geom_point()+
geom_smooth()+
facet_wrap(vars(age))+
xlab("AMO")+
ylab("eigen_alignment")+
theme_bw()+
theme(strip.text.x = element_text(margin = margin(.1, 0, .1, 0, "cm")))
s4
# eigen ~ amo
s4 <- ggplot(driver.eigen,
aes(x = amo, y = eigen_alignment))+
geom_point()+
geom_smooth()+
facet_wrap(vars(age))+
xlab("AMO")+
ylab("eigen_alignment")+
theme_bw()+
theme(strip.text.x = element_text(margin = margin(.05, 0, .05, 0, "cm")))
s4
# eigen ~ amo
s4 <- ggplot(driver.eigen,
aes(x = amo, y = eigen_alignment))+
geom_point()+
geom_smooth()+
facet_wrap(vars(age))+
xlab("AMO")+
ylab("eigen_alignment")+
theme_bw()+
theme(strip.text.x = element_text(margin = margin(.01, 0, .01, 0, "cm")))
s4
driver.eigen
# eigen ~ ABI
s1 <- ggplot(driver.eigen,
aes(x = ABImsy, y = eigen_alignment))+
geom_point()+
geom_smooth()+
facet_wrap(vars(age))+
xlab("ABImsy (Griffith2023)")+
ylab("eigen_alignment")+
theme_bw()+
theme(strip.text.x = element_text(margin = margin(.01, 0, .01, 0, "cm")))
# eigen ~ BT
s2 <- ggplot(driver.eigen,
aes(x = MeanBT, y = eigen_alignment))+
geom_point()+
geom_smooth()+
facet_wrap(vars(age))+
xlab("Mean bottom temperature North Sea")+
ylab("eigen_alignment")+
theme_bw()+
theme(strip.text.x = element_text(margin = margin(.01, 0, .01, 0, "cm")))
# eigen ~ tsb
s3 <- ggplot(driver.eigen,
aes(x = tsb_tonne, y = eigen_alignment))+
geom_point()+
geom_smooth()+
facet_wrap(vars(age))+
xlab("total stock biomass (tonne)")+
ylab("eigen_alignment")+
theme_bw()+
theme(strip.text.x = element_text(margin = margin(.01, 0, .01, 0, "cm")))
# eigen ~ amo
s4 <- ggplot(driver.eigen,
aes(x = amo, y = eigen_alignment))+
geom_point()+
geom_smooth()+
facet_wrap(vars(age))+
xlab("AMO")+
ylab("eigen_alignment")+
theme_bw()+
theme(strip.text.x = element_text(margin = margin(.01, 0, .01, 0, "cm")))
grid.arrange(s1, s2, s3, s4, ncol=1) # output 6 x 8 vertical
ccm.rho[[1]]
# results: abi effects on age 1-6 is column 1, bt effects is column 2, tsb effects is column 3
ccm.sig[[1]]
